using System;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Goblin.Application.Core;
using Goblin.Application.Core.Options;
using Goblin.Application.Core.Results.Failed;
using Goblin.Application.Core.Results.Success;
using Goblin.Application.Vk.Converters;
using Goblin.Application.Vk.Extensions;
using Goblin.Application.Vk.Models;
using Goblin.Application.Vk.Options;
using Goblin.DataAccess;
using Goblin.Domain.Entities;
using Microsoft.Extensions.Options;
using Serilog;
using VkNet.Abstractions;
using VkNet.Enums;
using VkNet.Enums.SafetyEnums;
using VkNet.Model.GroupUpdate;
using VkNet.Model.Keyboard;
using VkNet.Model.RequestParams;

namespace Goblin.Application.Vk
{
    public class VkCallbackHandler
    {
        private readonly BotDbContext _db;
        private readonly ILogger _logger;
        private readonly VkOptions _options;
        private readonly CommandsService _commandsService;
        private readonly IVkApi _vkApi;
        private readonly IMapper _mapper;

        public VkCallbackHandler(CommandsService commandsService, BotDbContext db, IVkApi vkApi, IOptions<VkOptions> options,
                               IMapper mapper)
        {
            _commandsService = commandsService;
            _db = db;
            _vkApi = vkApi;
            _mapper = mapper;
            _options = options.Value;
            _logger = Log.ForContext<VkCallbackHandler>();
        }

        public async Task Handle(GroupUpdate upd)
        {
            if(upd.Secret != _options.SecretKey)
            {
                _logger.Warning("–ü—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º ({0})", upd.Secret);
                return;
            }

            _logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∏–ø–æ–º {0}", upd.Type);

            if(upd.Type == GroupUpdateType.MessageNew)
            {
                await MessageNew(upd.MessageNew);
            }
            else if(upd.Type == GroupUpdateType.GroupLeave)
            {
                await GroupLeave(upd.GroupLeave);
            }
            else if(upd.Type == GroupUpdateType.GroupJoin)
            {
                await GroupJoin(upd.GroupJoin);
            }
            else
            {
                _logger.Fatal("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {0} –Ω–µ –Ω–∞–π–¥–µ–Ω", upd.Type);
                throw new ArgumentOutOfRangeException(nameof(upd.Type), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è");
            }
            _logger.Information("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {0} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", upd.Type);
        }

        private async Task MessageNew(MessageNew messageNew)
        {
            var msg = _mapper.Map<VkMessage>(messageNew.Message);
            var user = await _db.BotUsers.FindAsync(msg.FromId);
            if(user is null)
            {
                _logger.Debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {0} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏.", msg.FromId);
                user = (await _db.BotUsers.AddAsync(new BotUser(msg.MessageUserId))).Entity;
                await _db.Subscribes.AddAsync(new Subscribe(msg.MessageUserId, false, false));
                await _db.SaveChangesAsync();
                _logger.Debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
            }

            _logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");
            var result = await _commandsService.ExecuteCommand(msg, user);
            _logger.Information("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            _logger.Debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");

            if(result is FailedResult failed)
            {
                if(result is CommandNotFoundResult && !user.IsErrorsEnabled)
                {
                    // –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—à–∏–±–∫–∏
                    return;
                }

                await _vkApi.Messages.SendError(failed.ToString(), msg.MessageChatId);
            }
            else
            {
                var success = result as SuccessfulResult;
                await _vkApi.Messages.SendWithRandomId(new MessagesSendParams
                {
                    Message = success.Message,
                    Keyboard = KeyboardConverter.FromCoreToVk(success.Keyboard),
                    PeerId = msg.MessageChatId
                });
            }
            _logger.Information("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }

        public async Task GroupLeave(GroupLeave leave)
        {
            const string groupLeaveMessage = "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã üò¢\n" +
                                             "–ï—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —Ç—ã –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è —Å –±–æ—Ç–æ–º, —Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å " +
                                             "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '–∞–¥–º–∏–Ω *—Å–æ–æ–±—â–µ–Ω–∏–µ*' (–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏ –≤ —Å–ø—Ä–∞–≤–∫–µ).";
            
            _logger.Information("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{0} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É", leave.UserId);
            var admins = _db.BotUsers.Where(x => x.IsAdmin).Select(x => x.VkId);
            var vkUser = (await _vkApi.Users.GetAsync(new[] { leave.UserId.Value })).First();
            var userName = $"{vkUser.FirstName} {vkUser.LastName}";
            await _vkApi.Messages.SendToUserIdsWithRandomId(new MessagesSendParams
            {
                Message = $"@id{leave.UserId} ({userName}) –æ—Ç–ø–∏—Å–∞–ª—Å—è :–°",
                UserIds = admins
            });

            if(leave.IsSelf.HasValue && leave.IsSelf.Value)
            {
                try
                {
                    await _vkApi.Messages.SendWithRandomId(new MessagesSendParams
                    {
                        Message = groupLeaveMessage,
                        PeerId = leave.UserId.Value
                    });
                }
                catch
                {
                    // ignored
                }
            }
        }

        public async Task GroupJoin(GroupJoin join)
        {
            const string groupJoinMessage = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚ù§\n" +
                                            "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞ " +
                                            "–ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã '–∞–¥–º–∏–Ω *—Å–æ–æ–±—â–µ–Ω–∏–µ*' (–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏ –≤ —Å–ø—Ä–∞–≤–∫–µ)";
            
            _logger.Information("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{0} –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É", join.UserId);
            var admins = _db.BotUsers.Where(x => x.IsAdmin).Select(x => x.VkId);
            var vkUser = (await _vkApi.Users.GetAsync(new[] { join.UserId.Value })).First();
            var userName = $"{vkUser.FirstName} {vkUser.LastName}";
            await _vkApi.Messages.SendToUserIdsWithRandomId(new MessagesSendParams
            {
                Message = $"@id{join.UserId} ({userName}) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!",
                UserIds = admins
            });

            if(join.JoinType.HasValue && join.JoinType == GroupJoinType.Join)
            {
                try
                {
                    await _vkApi.Messages.SendWithRandomId(new MessagesSendParams
                    {
                        Message = groupJoinMessage,
                        PeerId = join.UserId.Value
                    });
                }
                catch
                {
                    // ignored
                }
            }
        }
    }
}